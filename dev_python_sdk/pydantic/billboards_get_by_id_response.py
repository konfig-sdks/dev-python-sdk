# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from dev_python_sdk.pydantic.billboards_get_by_id_response_target_geolocations import BillboardsGetByIdResponseTargetGeolocations

class BillboardsGetByIdResponse(BaseModel):
    id: typing.Optional[typing.Union[int, float]] = Field(None, alias='id')

    approved: typing.Optional[bool] = Field(None, alias='approved')

    audience_segment_id: typing.Optional[typing.Optional[str]] = Field(None, alias='audience_segment_id')

    body_markdown: typing.Optional[str] = Field(None, alias='body_markdown')

    cached_tag_list: typing.Optional[str] = Field(None, alias='cached_tag_list')

    clicks_count: typing.Optional[typing.Union[int, float]] = Field(None, alias='clicks_count')

    created_at: typing.Optional[str] = Field(None, alias='created_at')

    creator_id: typing.Optional[typing.Optional[str]] = Field(None, alias='creator_id')

    custom_display_label: typing.Optional[typing.Optional[str]] = Field(None, alias='custom_display_label')

    display_to: typing.Optional[str] = Field(None, alias='display_to')

    exclude_article_ids: typing.Optional[str] = Field(None, alias='exclude_article_ids')

    impressions_count: typing.Optional[typing.Union[int, float]] = Field(None, alias='impressions_count')

    name: typing.Optional[str] = Field(None, alias='name')

    organization_id: typing.Optional[typing.Union[int, float]] = Field(None, alias='organization_id')

    placement_area: typing.Optional[str] = Field(None, alias='placement_area')

    priority: typing.Optional[bool] = Field(None, alias='priority')

    processed_html: typing.Optional[str] = Field(None, alias='processed_html')

    published: typing.Optional[bool] = Field(None, alias='published')

    render_mode: typing.Optional[str] = Field(None, alias='render_mode')

    success_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='success_rate')

    template: typing.Optional[str] = Field(None, alias='template')

    type_of: typing.Optional[str] = Field(None, alias='type_of')

    updated_at: typing.Optional[str] = Field(None, alias='updated_at')

    weight: typing.Optional[typing.Union[int, float]] = Field(None, alias='weight')

    audience_segment_type: typing.Optional[typing.Optional[str]] = Field(None, alias='audience_segment_type')

    tag_list: typing.Optional[str] = Field(None, alias='tag_list')

    target_geolocations: typing.Optional[BillboardsGetByIdResponseTargetGeolocations] = Field(None, alias='target_geolocations')
    class Config:
        arbitrary_types_allowed = True
