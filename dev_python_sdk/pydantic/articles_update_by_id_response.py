# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from dev_python_sdk.pydantic.articles_update_by_id_response_tags import ArticlesUpdateByIdResponseTags
from dev_python_sdk.pydantic.articles_update_by_id_response_user import ArticlesUpdateByIdResponseUser

class ArticlesUpdateByIdResponse(BaseModel):
    tags: typing.Optional[ArticlesUpdateByIdResponseTags] = Field(None, alias='tags')

    title: typing.Optional[str] = Field(None, alias='title')

    description: typing.Optional[str] = Field(None, alias='description')

    type_of: typing.Optional[str] = Field(None, alias='type_of')

    id: typing.Optional[typing.Union[int, float]] = Field(None, alias='id')

    readable_publish_date: typing.Optional[str] = Field(None, alias='readable_publish_date')

    slug: typing.Optional[str] = Field(None, alias='slug')

    path: typing.Optional[str] = Field(None, alias='path')

    url: typing.Optional[str] = Field(None, alias='url')

    comments_count: typing.Optional[typing.Union[int, float]] = Field(None, alias='comments_count')

    public_reactions_count: typing.Optional[typing.Union[int, float]] = Field(None, alias='public_reactions_count')

    collection_id: typing.Optional[typing.Optional[str]] = Field(None, alias='collection_id')

    published_timestamp: typing.Optional[str] = Field(None, alias='published_timestamp')

    positive_reactions_count: typing.Optional[typing.Union[int, float]] = Field(None, alias='positive_reactions_count')

    cover_image: typing.Optional[str] = Field(None, alias='cover_image')

    social_image: typing.Optional[str] = Field(None, alias='social_image')

    canonical_url: typing.Optional[str] = Field(None, alias='canonical_url')

    created_at: typing.Optional[str] = Field(None, alias='created_at')

    edited_at: typing.Optional[str] = Field(None, alias='edited_at')

    crossposted_at: typing.Optional[typing.Optional[str]] = Field(None, alias='crossposted_at')

    published_at: typing.Optional[str] = Field(None, alias='published_at')

    last_comment_at: typing.Optional[str] = Field(None, alias='last_comment_at')

    reading_time_minutes: typing.Optional[typing.Union[int, float]] = Field(None, alias='reading_time_minutes')

    tag_list: typing.Optional[str] = Field(None, alias='tag_list')

    body_html: typing.Optional[str] = Field(None, alias='body_html')

    body_markdown: typing.Optional[str] = Field(None, alias='body_markdown')

    user: typing.Optional[ArticlesUpdateByIdResponseUser] = Field(None, alias='user')
    class Config:
        arbitrary_types_allowed = True
