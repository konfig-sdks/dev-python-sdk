# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from dev_python_sdk.pydantic.billboard_target_geolocations import BillboardTargetGeolocations

class Billboard(BaseModel):
    # For internal use, helps distinguish ads from one another
    name: str = Field(alias='name')

    # The text (in markdown) of the ad (required)
    body_markdown: str = Field(alias='body_markdown')

    # Identifies which area of site layout the ad can appear in
    placement_area: Literal["sidebar_left", "sidebar_left_2", "sidebar_right", "feed_first", "feed_second", "feed_third", "home_hero", "post_sidebar", "post_comments"] = Field(alias='placement_area')

    # The ID of the Billboard
    id: typing.Optional[int] = Field(None, alias='id')

    # Ad must be both published and approved to be in rotation
    approved: typing.Optional[bool] = Field(None, alias='approved')

    # Ad must be both published and approved to be in rotation
    published: typing.Optional[bool] = Field(None, alias='published')

    # Identifies the organization to which the ad belongs
    organization_id: typing.Optional[typing.Optional[int]] = Field(None, alias='organization_id')

    # Identifies the user who created the ad.
    creator_id: typing.Optional[typing.Optional[int]] = Field(None, alias='creator_id')

    # Tags on which this ad can be displayed (blank is all/any tags)
    tag_list: typing.Optional[str] = Field(None, alias='tag_list')

    # Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
    exclude_article_ids: typing.Optional[typing.Optional[str]] = Field(None, alias='exclude_article_ids')

    # Specifies a specific audience segment who will see this billboard
    audience_segment_id: typing.Optional[int] = Field(None, alias='audience_segment_id')

    # Specifies a group of users who will see this billboard (must match audience_segment_id if both provided)
    audience_segment_type: typing.Optional[Literal["manual", "trusted", "posted", "no_posts_yet", "dark_theme", "light_theme", "no_experience", "experience1", "experience2", "experience3", "experience4", "experience5"]] = Field(None, alias='audience_segment_type')

    target_geolocations: typing.Optional[BillboardTargetGeolocations] = Field(None, alias='target_geolocations')

    # Potentially limits visitors to whom the ad is visible
    display_to: typing.Optional[Literal["all", "logged_in", "logged_out"]] = Field(None, alias='display_to')

    # Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) 
    type_of: typing.Optional[Literal["in_house", "community", "external"]] = Field(None, alias='type_of')
    class Config:
        arbitrary_types_allowed = True
