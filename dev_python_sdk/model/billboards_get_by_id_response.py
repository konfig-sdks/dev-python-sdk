# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dev_python_sdk import schemas  # noqa: F401


class BillboardsGetByIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            approved = schemas.BoolSchema
            
            
            class audience_segment_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'audience_segment_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            body_markdown = schemas.StrSchema
            cached_tag_list = schemas.StrSchema
            clicks_count = schemas.NumberSchema
            created_at = schemas.StrSchema
            
            
            class creator_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creator_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_display_label(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_display_label':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            display_to = schemas.StrSchema
            exclude_article_ids = schemas.StrSchema
            impressions_count = schemas.NumberSchema
            name = schemas.StrSchema
            organization_id = schemas.NumberSchema
            placement_area = schemas.StrSchema
            priority = schemas.BoolSchema
            processed_html = schemas.StrSchema
            published = schemas.BoolSchema
            render_mode = schemas.StrSchema
            success_rate = schemas.NumberSchema
            template = schemas.StrSchema
            type_of = schemas.StrSchema
            updated_at = schemas.StrSchema
            weight = schemas.NumberSchema
            
            
            class audience_segment_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'audience_segment_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            tag_list = schemas.StrSchema
        
            @staticmethod
            def target_geolocations() -> typing.Type['BillboardsGetByIdResponseTargetGeolocations']:
                return BillboardsGetByIdResponseTargetGeolocations
            __annotations__ = {
                "id": id,
                "approved": approved,
                "audience_segment_id": audience_segment_id,
                "body_markdown": body_markdown,
                "cached_tag_list": cached_tag_list,
                "clicks_count": clicks_count,
                "created_at": created_at,
                "creator_id": creator_id,
                "custom_display_label": custom_display_label,
                "display_to": display_to,
                "exclude_article_ids": exclude_article_ids,
                "impressions_count": impressions_count,
                "name": name,
                "organization_id": organization_id,
                "placement_area": placement_area,
                "priority": priority,
                "processed_html": processed_html,
                "published": published,
                "render_mode": render_mode,
                "success_rate": success_rate,
                "template": template,
                "type_of": type_of,
                "updated_at": updated_at,
                "weight": weight,
                "audience_segment_type": audience_segment_type,
                "tag_list": tag_list,
                "target_geolocations": target_geolocations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved"]) -> MetaOapg.properties.approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audience_segment_id"]) -> MetaOapg.properties.audience_segment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body_markdown"]) -> MetaOapg.properties.body_markdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cached_tag_list"]) -> MetaOapg.properties.cached_tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clicks_count"]) -> MetaOapg.properties.clicks_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator_id"]) -> MetaOapg.properties.creator_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_display_label"]) -> MetaOapg.properties.custom_display_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_to"]) -> MetaOapg.properties.display_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude_article_ids"]) -> MetaOapg.properties.exclude_article_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impressions_count"]) -> MetaOapg.properties.impressions_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placement_area"]) -> MetaOapg.properties.placement_area: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processed_html"]) -> MetaOapg.properties.processed_html: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published"]) -> MetaOapg.properties.published: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["render_mode"]) -> MetaOapg.properties.render_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success_rate"]) -> MetaOapg.properties.success_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type_of"]) -> MetaOapg.properties.type_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weight"]) -> MetaOapg.properties.weight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audience_segment_type"]) -> MetaOapg.properties.audience_segment_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_list"]) -> MetaOapg.properties.tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_geolocations"]) -> 'BillboardsGetByIdResponseTargetGeolocations': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "approved", "audience_segment_id", "body_markdown", "cached_tag_list", "clicks_count", "created_at", "creator_id", "custom_display_label", "display_to", "exclude_article_ids", "impressions_count", "name", "organization_id", "placement_area", "priority", "processed_html", "published", "render_mode", "success_rate", "template", "type_of", "updated_at", "weight", "audience_segment_type", "tag_list", "target_geolocations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved"]) -> typing.Union[MetaOapg.properties.approved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audience_segment_id"]) -> typing.Union[MetaOapg.properties.audience_segment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body_markdown"]) -> typing.Union[MetaOapg.properties.body_markdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cached_tag_list"]) -> typing.Union[MetaOapg.properties.cached_tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clicks_count"]) -> typing.Union[MetaOapg.properties.clicks_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator_id"]) -> typing.Union[MetaOapg.properties.creator_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_display_label"]) -> typing.Union[MetaOapg.properties.custom_display_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_to"]) -> typing.Union[MetaOapg.properties.display_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude_article_ids"]) -> typing.Union[MetaOapg.properties.exclude_article_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impressions_count"]) -> typing.Union[MetaOapg.properties.impressions_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> typing.Union[MetaOapg.properties.organization_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placement_area"]) -> typing.Union[MetaOapg.properties.placement_area, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processed_html"]) -> typing.Union[MetaOapg.properties.processed_html, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published"]) -> typing.Union[MetaOapg.properties.published, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["render_mode"]) -> typing.Union[MetaOapg.properties.render_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success_rate"]) -> typing.Union[MetaOapg.properties.success_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> typing.Union[MetaOapg.properties.template, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type_of"]) -> typing.Union[MetaOapg.properties.type_of, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weight"]) -> typing.Union[MetaOapg.properties.weight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audience_segment_type"]) -> typing.Union[MetaOapg.properties.audience_segment_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_list"]) -> typing.Union[MetaOapg.properties.tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_geolocations"]) -> typing.Union['BillboardsGetByIdResponseTargetGeolocations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "approved", "audience_segment_id", "body_markdown", "cached_tag_list", "clicks_count", "created_at", "creator_id", "custom_display_label", "display_to", "exclude_article_ids", "impressions_count", "name", "organization_id", "placement_area", "priority", "processed_html", "published", "render_mode", "success_rate", "template", "type_of", "updated_at", "weight", "audience_segment_type", "tag_list", "target_geolocations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        approved: typing.Union[MetaOapg.properties.approved, bool, schemas.Unset] = schemas.unset,
        audience_segment_id: typing.Union[MetaOapg.properties.audience_segment_id, None, str, schemas.Unset] = schemas.unset,
        body_markdown: typing.Union[MetaOapg.properties.body_markdown, str, schemas.Unset] = schemas.unset,
        cached_tag_list: typing.Union[MetaOapg.properties.cached_tag_list, str, schemas.Unset] = schemas.unset,
        clicks_count: typing.Union[MetaOapg.properties.clicks_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        creator_id: typing.Union[MetaOapg.properties.creator_id, None, str, schemas.Unset] = schemas.unset,
        custom_display_label: typing.Union[MetaOapg.properties.custom_display_label, None, str, schemas.Unset] = schemas.unset,
        display_to: typing.Union[MetaOapg.properties.display_to, str, schemas.Unset] = schemas.unset,
        exclude_article_ids: typing.Union[MetaOapg.properties.exclude_article_ids, str, schemas.Unset] = schemas.unset,
        impressions_count: typing.Union[MetaOapg.properties.impressions_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        organization_id: typing.Union[MetaOapg.properties.organization_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        placement_area: typing.Union[MetaOapg.properties.placement_area, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, bool, schemas.Unset] = schemas.unset,
        processed_html: typing.Union[MetaOapg.properties.processed_html, str, schemas.Unset] = schemas.unset,
        published: typing.Union[MetaOapg.properties.published, bool, schemas.Unset] = schemas.unset,
        render_mode: typing.Union[MetaOapg.properties.render_mode, str, schemas.Unset] = schemas.unset,
        success_rate: typing.Union[MetaOapg.properties.success_rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        template: typing.Union[MetaOapg.properties.template, str, schemas.Unset] = schemas.unset,
        type_of: typing.Union[MetaOapg.properties.type_of, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        weight: typing.Union[MetaOapg.properties.weight, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        audience_segment_type: typing.Union[MetaOapg.properties.audience_segment_type, None, str, schemas.Unset] = schemas.unset,
        tag_list: typing.Union[MetaOapg.properties.tag_list, str, schemas.Unset] = schemas.unset,
        target_geolocations: typing.Union['BillboardsGetByIdResponseTargetGeolocations', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BillboardsGetByIdResponse':
        return super().__new__(
            cls,
            *args,
            id=id,
            approved=approved,
            audience_segment_id=audience_segment_id,
            body_markdown=body_markdown,
            cached_tag_list=cached_tag_list,
            clicks_count=clicks_count,
            created_at=created_at,
            creator_id=creator_id,
            custom_display_label=custom_display_label,
            display_to=display_to,
            exclude_article_ids=exclude_article_ids,
            impressions_count=impressions_count,
            name=name,
            organization_id=organization_id,
            placement_area=placement_area,
            priority=priority,
            processed_html=processed_html,
            published=published,
            render_mode=render_mode,
            success_rate=success_rate,
            template=template,
            type_of=type_of,
            updated_at=updated_at,
            weight=weight,
            audience_segment_type=audience_segment_type,
            tag_list=tag_list,
            target_geolocations=target_geolocations,
            _configuration=_configuration,
            **kwargs,
        )

from dev_python_sdk.model.billboards_get_by_id_response_target_geolocations import BillboardsGetByIdResponseTargetGeolocations
