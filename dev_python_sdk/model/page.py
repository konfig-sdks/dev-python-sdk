# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dev_python_sdk import schemas  # noqa: F401


class Page(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Representation of a page object
    """


    class MetaOapg:
        required = {
            "template",
            "description",
            "title",
            "slug",
        }
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            slug = schemas.StrSchema
            
            
            class template(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "contained": "CONTAINED",
                        "full_within_layout": "FULL_WITHIN_LAYOUT",
                        "nav_bar_included": "NAV_BAR_INCLUDED",
                        "json": "JSON",
                    }
                
                @schemas.classproperty
                def CONTAINED(cls):
                    return cls("contained")
                
                @schemas.classproperty
                def FULL_WITHIN_LAYOUT(cls):
                    return cls("full_within_layout")
                
                @schemas.classproperty
                def NAV_BAR_INCLUDED(cls):
                    return cls("nav_bar_included")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("json")
            
            
            class body_markdown(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'body_markdown':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class body_json(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'body_json':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_top_level_path = schemas.BoolSchema
            
            
            class social_image(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'social_image':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "title": title,
                "description": description,
                "slug": slug,
                "template": template,
                "body_markdown": body_markdown,
                "body_json": body_json,
                "is_top_level_path": is_top_level_path,
                "social_image": social_image,
            }
    
    template: MetaOapg.properties.template
    description: MetaOapg.properties.description
    title: MetaOapg.properties.title
    slug: MetaOapg.properties.slug
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body_markdown"]) -> MetaOapg.properties.body_markdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body_json"]) -> MetaOapg.properties.body_json: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_top_level_path"]) -> MetaOapg.properties.is_top_level_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social_image"]) -> MetaOapg.properties.social_image: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "slug", "template", "body_markdown", "body_json", "is_top_level_path", "social_image", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body_markdown"]) -> typing.Union[MetaOapg.properties.body_markdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body_json"]) -> typing.Union[MetaOapg.properties.body_json, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_top_level_path"]) -> typing.Union[MetaOapg.properties.is_top_level_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social_image"]) -> typing.Union[MetaOapg.properties.social_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "slug", "template", "body_markdown", "body_json", "is_top_level_path", "social_image", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        template: typing.Union[MetaOapg.properties.template, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        slug: typing.Union[MetaOapg.properties.slug, str, ],
        body_markdown: typing.Union[MetaOapg.properties.body_markdown, None, str, schemas.Unset] = schemas.unset,
        body_json: typing.Union[MetaOapg.properties.body_json, None, str, schemas.Unset] = schemas.unset,
        is_top_level_path: typing.Union[MetaOapg.properties.is_top_level_path, bool, schemas.Unset] = schemas.unset,
        social_image: typing.Union[MetaOapg.properties.social_image, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Page':
        return super().__new__(
            cls,
            *args,
            template=template,
            description=description,
            title=title,
            slug=slug,
            body_markdown=body_markdown,
            body_json=body_json,
            is_top_level_path=is_top_level_path,
            social_image=social_image,
            _configuration=_configuration,
            **kwargs,
        )
