# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dev_python_sdk import schemas  # noqa: F401


class Organization(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Representation of an Organization
    """


    class MetaOapg:
        
        class properties:
            summary = schemas.StrSchema
            type_of = schemas.StrSchema
            username = schemas.StrSchema
            name = schemas.StrSchema
            twitter_username = schemas.StrSchema
            github_username = schemas.StrSchema
            url = schemas.StrSchema
            location = schemas.StrSchema
            joined_at = schemas.StrSchema
            tech_stack = schemas.StrSchema
            
            
            class tag_line(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tag_line':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class story(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'story':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "summary": summary,
                "type_of": type_of,
                "username": username,
                "name": name,
                "twitter_username": twitter_username,
                "github_username": github_username,
                "url": url,
                "location": location,
                "joined_at": joined_at,
                "tech_stack": tech_stack,
                "tag_line": tag_line,
                "story": story,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type_of"]) -> MetaOapg.properties.type_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter_username"]) -> MetaOapg.properties.twitter_username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["github_username"]) -> MetaOapg.properties.github_username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joined_at"]) -> MetaOapg.properties.joined_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tech_stack"]) -> MetaOapg.properties.tech_stack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_line"]) -> MetaOapg.properties.tag_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["story"]) -> MetaOapg.properties.story: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "type_of", "username", "name", "twitter_username", "github_username", "url", "location", "joined_at", "tech_stack", "tag_line", "story", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type_of"]) -> typing.Union[MetaOapg.properties.type_of, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter_username"]) -> typing.Union[MetaOapg.properties.twitter_username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["github_username"]) -> typing.Union[MetaOapg.properties.github_username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joined_at"]) -> typing.Union[MetaOapg.properties.joined_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tech_stack"]) -> typing.Union[MetaOapg.properties.tech_stack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_line"]) -> typing.Union[MetaOapg.properties.tag_line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["story"]) -> typing.Union[MetaOapg.properties.story, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "type_of", "username", "name", "twitter_username", "github_username", "url", "location", "joined_at", "tech_stack", "tag_line", "story", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        type_of: typing.Union[MetaOapg.properties.type_of, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        twitter_username: typing.Union[MetaOapg.properties.twitter_username, str, schemas.Unset] = schemas.unset,
        github_username: typing.Union[MetaOapg.properties.github_username, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        joined_at: typing.Union[MetaOapg.properties.joined_at, str, schemas.Unset] = schemas.unset,
        tech_stack: typing.Union[MetaOapg.properties.tech_stack, str, schemas.Unset] = schemas.unset,
        tag_line: typing.Union[MetaOapg.properties.tag_line, None, str, schemas.Unset] = schemas.unset,
        story: typing.Union[MetaOapg.properties.story, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Organization':
        return super().__new__(
            cls,
            *args,
            summary=summary,
            type_of=type_of,
            username=username,
            name=name,
            twitter_username=twitter_username,
            github_username=github_username,
            url=url,
            location=location,
            joined_at=joined_at,
            tech_stack=tech_stack,
            tag_line=tag_line,
            story=story,
            _configuration=_configuration,
            **kwargs,
        )
